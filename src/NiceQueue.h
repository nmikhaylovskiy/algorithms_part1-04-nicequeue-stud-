#ifndef NICE_QUEUE_H_
#define NICE_QUEUE_H_

#include <stdexcept>

#include "NiceStack.h"

//=============================================================================
//  ____          _          _                                     
// |    \ ___ ___| |_    ___| |_ ___ ___ ___ ___    _____ ___      
// |  |  | . |   |  _|  |  _|   | .'|   | . | -_|  |     | -_|     
// |____/|___|_|_|_|    |___|_|_|__,|_|_|_  |___|  |_|_|_|___|     
//                                      |___|                      
//=============================================================================

// Не менять этот файл!

template <class T>
class NiceQueue
{
public:
    /// Создать NiceQueue с вместимостью capacity.
    NiceQueue(size_t capacity);
    
    /// Деструктор. Нужен ли тут деструктор?
    ~NiceQueue();
    
protected:
    /// Нельзя создать NiceQueue по умолчанию извне.
    /// Только с помощью другого конструктора с параметром или из наследуемого класса.
    NiceQueue() {}

public:
    
    /// Возвращает вместимость очереди в элементах.
    size_t capacity() const { return _capacity; }

    /// Возвращает число элементов в очереди.
    size_t size() const;

    /// Положить новый элемент в очередь.
    /// Возникает исключение out_of_range если очередь полна.
    void enq(const T& newElement);

    /// Извлечь элемент из очереди.
    /// Возникает исключение out_of_range если очередь пуста.
    T deq();

    /// Возвращает копию минимального элемента в очереди.
    T getMinimum();
    
protected:
    /// Входной стек.
    NiceStack<T> _inStack;
    /// Выходной стек.
    NiceStack<T> _outStack;
    /// Вместимость очереди.
    size_t _capacity;
};

#include "NiceQueue.hpp"

#endif

